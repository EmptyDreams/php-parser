package top.kmar.php;

import java_cup.runtime.*;

// 字符串
terminal String T_SINGLE_QUOTE, T_DOUBLE_QUOTE, T_BACK_QUOTE, T_CODE_BLOCK;
// ${
terminal T_OPEN_DOLLAR_CURLY;
// { }
terminal T_OPEN_CURLY, T_CLOSE_CURLY;
// [ ]
terminal T_OPEN_SQUARE, T_CLOSE_SQUARE;
// ( )
terminal T_OPEN_PAREN, T_CLOSE_PAREN;
// 注释
terminal String T_LINE_COMMENT, T_BLOCK_COMMENT_CONTENT;
terminal String T_OPEN_BLOCK_COMMENT, T_CLOSE_BLOCK_COMMENT;
// 符号
terminal    T_SEMI,        // ;
            T_COMMA,            // ,
            T_DOT,              // .
            T_DOUBLE_ARROW,     // =>
            T_SINGLE_ARROW,     // ->
            T_ELLIPSIS,         // ...
            T_SCOPE_RESOLUTION, // ::
            T_PLUS,             // +
            T_MINUS,            // -
            T_MUL,              // *
            T_DIV,              // /
            T_MOD,              // %
            T_INC,              // ++
            T_DEC,              // --
            T_ASSIGN,           // =
            T_PLUS_ASSIGN,      // +=
            T_DOT_ASSIGN,       // .=
            T_MINUS_ASSIGN,     // -=
            T_MUL_ASSIGN,       // *=
            T_DIV_ASSIGN,       // /=
            T_MOD_ASSIGN,       // %=
            T_BIT_AND,          // &
            T_BIT_OR,           // |
            T_BIT_XOR,          // ^
            T_BIT_NOT,          // ~
            T_LEFT_SHIFT,       // <<
            T_RIGHT_SHIFT,      // >>
            T_BIT_AND_ASSIGN,   // &=
            T_BIT_OR_ASSIGN,    // |=
            T_BIT_XOR_ASSIGN,   // ^=
            T_LEFT_SHIFT_ASSIGN,// <<=
            T_RIGHT_SHIFT_ASSIGN,// >>=
            T_BOOL_NOT,         // !
            T_BOOL_AND,         // &&
            T_BOOL_OR,          // ||
            T_DOUBLE_EQ,        // ==
            T_NOT_DOUBLE_EQ,    // !=
            T_TRIPLE_EQ,        // ===
            T_NOT_TRIPLE_EQ,    // !==
            T_LT,               // <
            T_GT,               // >
            T_LT_EQ,            // <=
            T_GT_EQ,            // >=
            T_QUESTION,         // ?
            T_COLON,            // :
            T_POW,              // **
            T_COALESCE,         // ??
            T_ELVIS,            // ?:
            T_AT;               // @
// 关键字
terminal    T_NULL,             // null
            T_TRUE,             // true
            T_FALSE,            // false
            T_ECHO,             // echo
            T_PRINT,            // print
            T_RETURN,           // return
            T_THROW,            // throw
            T_IF,               // if
            T_ELSE,             // else
            T_ELSEIF,           // elseif
            T_FOR,              // for
            T_FOREACH,          // foreach
            T_WHILE,            // while
            T_DO,               // do
            T_END_IF,           // endif
            T_END_FOR,          // endfor
            T_END_FOREACH,      // endforeach
            T_END_WHILE,        // endwhile
            T_BREAK,            // break
            T_CONTINUE,         // continue
            T_GOTO,             // goto
            T_SWITCH,           // switch
            T_CASE,             // case
            T_DEFAULT,          // default
            T_END_SWITCH,       // endswitch
            T_TRY,              // try
            T_CATCH,            // catch
            T_FINALLY,          // finally
            T_FUNCTION,         // function
            T_CLASS,            // class
            T_ENUM,             // enum
            T_TRAIT,            // trait
            T_INTERFACE,        // interface
            T_EXTENDS,          // extends
            T_IMPLEMENTS,       // implements
            T_STATIC,           // static
            T_ABSTRACT,         // abstract
            T_FINAL,            // final
            T_PRIVATE,          // private
            T_PROTECTED,        // protected
            T_PUBLIC,           // public
            T_CONST,            // const
            T_NEW,              // new
            T_INSTANCEOF,       // instanceof
            T_MIXED,            // mixed
            T_CALLABLE,         // callable
            T_INT,              // int
            T_FLOAT,            // float
            T_BOOL,             // bool
            T_STRING,           // string
            T_ARRAY,            // array
            T_OBJECT,           // object
            T_ITERABLE,         // iterable
            T_RESOURCE,         // resource
            T_VOID,             // void
            T_YIELD,            // yield
            T_YIELD_FROM,       // yield from
            T_VAR,              // var
            T_GLOBAL,           // global
            T_LIST,             // list
            T_CLONE,            // clone
            T_USE,              // use
            T_NAMESPACE,        // namespace
            T_AS,               // as
            T_REQUIRE,          // require
            T_REQUIRE_ONCE,     // require_once
            T_INCLUDE,          // include
            T_INCLUDE_ONCE,     // include_once
            T_EVAL,             // eval
            T_EXIT,             // exit
            T_DIE,              // die
            T_DECLARE,          // declare
            T_SELF,             // self
            T_PARENT;           // parent

// 值
terminal String T_STR_VALUE, T_VAR_NAME, T_SIMPLE_NAME, T_INT_VALUE, T_FLOAT_VALUE, T_FLOAT_E_VALUE;
terminal String T_QUALIFIED_NAME;
terminal T_WHITESPACE;

nonterminal EMPTY;
// T_SIMPLE_NAME 或 T_QUALIFIED_NAME
nonterminal IAstNode NT_IDENTIFIER;
// 权限修饰符
nonterminal IAstNode NT_ACCESS_MODIFIER;
// 修饰符
nonterminal IAstNode NT_METHOD_MODIFIER;
nonterminal List NT_METHOD_MODIFIER_LIST;

// 根节点
nonterminal IAstNode NT_S, NT_PHP_BLOCK;
// top
nonterminal IAstNode NT_TOP_STATEMENT;
nonterminal List NT_TOP_STATEMENT_LIST;
// 类型
nonterminal IAstNode NT_TYPE;
// use
nonterminal IAstNode NT_USE_DECLARATION, NT_USE_TARGET;
nonterminal List NT_USE_TARGET_LIST;
// namespace
nonterminal IAstNode NT_NAMESPACE_DELEARATION;
// function
nonterminal IAstNode NT_FUNC_DECLARATION, NT_METHOD_DECLARATION, NT_ORIGINAL_FUNC_DECLARATION, NT_FUNC_PARAMER;
nonterminal List NT_FUNC_PARAMER_LIST;
// class
nonterminal IAstNode NT_CLASS_DECLARATION, NT_ORIGINAL_CLASS_DECLARATION, NT_CLASS_STAT;
nonterminal List NT_CLASS_STAT_LIST, NT_IMPLEMENT_LIST;
nonterminal IAstNode NT_TRAIT_DECLARATION;

// 表达式
nonterminal IAstNode    NT_STATEMENT,
                        NT_IF_STAT,
                        NT_WHILE_STAT, NT_DO_WHILD_STAT,
                        NT_FOR_STAT, NT_FOR_EACH_STAT,
                        NT_SWITCH_STAT,
                        NT_BREAK_STAT, NT_CONTINUE_STAT, NT_RETURN_STAT,
                        NT_YIELD_STAT, NT_YIELD_FROOM_STAT,
                        NT_GLOBAL_STAT,
                        NT_STATIC_VAR_STAT,
                        NT_ECHO_STAT,
                        NT_EXPRESSION_STAT,
                        NT_TRY_CATCH_STAT, NT_THROW_STAT,
                        NT_GOTO_STAT,
                        NT_DECLARE_STAT,
                        NT_USE_STAT,
                        NT_EMPTY_STAT
                        ;
nonterminal IAstNode NT_STATEMENT_LIST;

start with NT_S;

// 标识符
NT_IDENTIFIER ::= T_SIMPLE_NAME:simpleName | T_QUALIFIED_NAME:qualifiedName;
// 修饰符
NT_ACCESS_MODIFIER ::= T_PUBLIC:isPublic | T_PROTECTED:isProtected | T_PRIVATE:isPrivate;
NT_METHOD_MODIFIER ::= T_STATIC:isStatic | T_FINAL:isFinal | T_ABSTRACT:isAbstract;
NT_METHOD_MODIFIER_LIST ::= NT_METHOD_MODIFIER:item
    | NT_METHOD_MODIFIER_LIST NT_METHOD_MODIFIER:item;

NT_S ::= T_CODE_BLOCK NT_TOP_STATEMENT_LIST:topList
    | T_CODE_BLOCK;

// 顶层表达式
NT_TOP_STATEMENT ::= NT_USE_DECLARATION:use
    | NT_NAMESPACE_DELEARATION:namespace
    | NT_FUNC_DECLARATION:func;
NT_TOP_STATEMENT_LIST ::= NT_TOP_STATEMENT:item
    | NT_TOP_STATEMENT_LIST NT_TOP_STATEMENT:item;

// 完整的 use 表达式
NT_USE_DECLARATION ::= T_USE NT_USE_TARGET:target T_SEMI;
// use 后方的表达式
NT_USE_TARGET ::= NT_IDENTIFIER:identifier T_AS T_SIMPLE_NAME:alias         // \xxx\xxx as xxx
    | T_FUNCTION:isFunc NT_IDENTIFIER:identifier T_AS T_SIMPLE_NAME:alias   // function \xxx\xxx as xxx
    | T_CONST:isConst NT_IDENTIFIER:identifier T_AS T_SIMPLE_NAME:alias     // const \xxx\xxx as xxx
    | NT_IDENTIFIER:identifier                      // \xxx\xxx
    | T_FUNCTION:isFunc NT_IDENTIFIER:identifier    // function \xxx\xxx
    | T_CONST:isConst NT_IDENTIFIER:identifier      // const \xxx\xxx
    // \xxx\xxx{item, item...}
    | T_QUALIFIED_NAME:prefix T_OPEN_CURLY NT_USE_TARGET_LIST:subList T_CLOSE_CURLY
    // const \xxx\xxx{item, item...}
    | T_CONST:isConst T_QUALIFIED_NAME:qualifiedPrefix T_OPEN_CURLY NT_USE_TARGET_LIST:subList T_CLOSE_CURLY
    // function \xxx\xxx{item, item, <...>,?}
    | T_FUNCTION:isFunc T_QUALIFIED_NAME:qualifiedPrefix T_OPEN_CURLY NT_USE_TARGET_LIST:subList T_CLOSE_CURLY;
// item, item, <...>,?
NT_USE_TARGET_LIST ::= NT_USE_TARGET:item
    | NT_USE_TARGET_LIST T_COMMA NT_USE_TARGET:item
    | NT_USE_TARGET_LIST T_COMMA;

// namespace
NT_NAMESPACE_DELEARATION ::= T_NAMESPACE NT_IDENTIFIER:identifier T_SEMI    // namespace xxx;
    // namespace xxx {}
    | T_NAMESPACE NT_IDENTIFIER:identifier T_OPEN_CURLY NT_TOP_STATEMENT_LIST:statementList T_CLOSE_CURLY;

// 顶层函数
NT_FUNC_DECLARATION ::= NT_ORIGINAL_FUNC_DECLARATION:original
    | T_FINAL:isFinal NT_ORIGINAL_FUNC_DECLARATION:original;
// 函数定义
NT_ORIGINAL_FUNC_DECLARATION ::=
    // function xxx(xxx) { xxx }
    T_FUNCTION T_SIMPLE_NAME:name T_OPEN_PAREN NT_FUNC_PARAMER_LIST:paramerList T_CLOSE_PAREN
        T_OPEN_CURLY NT_STATEMENT_LIST:statementList T_CLOSE_CURLY
    // function xxx() { xxx }
    | T_FUNCTION T_SIMPLE_NAME:name T_OPEN_PAREN T_CLOSE_PAREN
        T_OPEN_CURLY NT_STATEMENT_LIST:statementList T_CLOSE_CURLY
    // function xxx(xxx): xxx { xxx }
    | T_FUNCTION T_SIMPLE_NAME:name T_OPEN_PAREN NT_FUNC_PARAMER_LIST:paramerList T_CLOSE_PAREN
        T_COLON NT_TYPE:returnType
        T_OPEN_CURLY NT_STATEMENT_LIST:statementList T_CLOSE_CURLY
    // function xxx(): xxx { xxx }
    | T_FUNCTION T_SIMPLE_NAME:name T_OPEN_PAREN T_CLOSE_PAREN
        T_COLON NT_TYPE:returnType
        T_OPEN_CURLY NT_STATEMENT_LIST:statementList T_CLOSE_CURLY;
// 类方法
NT_METHOD_DECLARATION ::= NT_ORIGINAL_FUNC_DECLARATION:func
    | NT_METHOD_MODIFIER_LIST:modifierList NT_ORIGINAL_FUNC_DECLARATION:func
    | NT_ACCESS_MODIFIER:accessModifier NT_ORIGINAL_FUNC_DECLARATION:func
    | NT_METHOD_MODIFIER_LIST:modifierList NT_ACCESS_MODIFIER:accessModifier NT_ORIGINAL_FUNC_DECLARATION:func
    | NT_ACCESS_MODIFIER:accessModifier NT_METHOD_MODIFIER_LIST:modifierList NT_ORIGINAL_FUNC_DECLARATION:func;

// 类定义
NT_CLASS_DECLARATION ::= NT_ORIGINAL_CLASS_DECLARATION:original
    | T_FINAL:isFinal NT_ORIGINAL_CLASS_DECLARATION:original
    | T_ABSTRACT:isAbstract NT_ORIGINAL_CLASS_DECLARATION:original;
NT_ORIGINAL_CLASS_DECLARATION ::=
    // class xxx { xxx }
    T_CLASS T_SIMPLE_NAME:name T_OPEN_CURLY NT_CLASS_STAT_LIST:statementList T_CLOSE_CURLY
    // class xxx extends xxx { xxx }
    | T_CLASS T_SIMPLE_NAME:name T_EXTENDS NT_IDENTIFIER:parent
        T_OPEN_CURLY NT_CLASS_STAT_LIST:statementList T_CLOSE_CURLY
    // class xxx implements xxx { xxx }
    | T_CLASS T_SIMPLE_NAME:name T_IMPLEMENTS NT_IMPLEMENT_LIST:ifaceList
        T_OPEN_CURLY NT_CLASS_STAT_LIST:statementList T_CLOSE_CURLY
    // class xxx extends xxx implements xxx { xxx }
    | T_CLASS T_SIMPLE_NAME:name T_EXTENDS NT_IDENTIFIER:parent T_IMPLEMENTS NT_IMPLEMENT_LIST:ifaceList
        T_OPEN_CURLY NT_CLASS_STAT_LIST:statementList T_CLOSE_CURLY;
// 接口实现列表
NT_IMPLEMENT_LIST ::= NT_IDENTIFIER:iface
    | NT_IMPLEMENT_LIST T_COMMA NT_IDENTIFIER:iface;
// 类成员列表
NT_CLASS_STAT_LIST ::= NT_CLASS_STAT:statement
    | NT_CLASS_STAT_LIST NT_CLASS_STAT:statement
    | EMPTY;
// trait class
NT_TRAIT_DECLARATION ::= T_TRAIT T_SIMPLE_NAME:name T_OPEN_CURLY NT_CLASS_STAT_LIST:statementList T_CLOSE_CURLY;

EMPTY ::= /* EMTPY */;