package top.kmar.php;

import java_cup.runtime.*;

// 字符串
terminal String T_SINGLE_QUOTE, T_DOUBLE_QUOTE, T_BACK_QUOTE, T_CODE_BLOCK;
// ${
terminal T_OPEN_DOLLAR_CURLY;
// { }
terminal T_OPEN_CURLY, T_CLOSE_CURLY;
// [ ]
terminal T_OPEN_SQUARE, T_CLOSE_SQUARE;
// ( )
terminal T_OPEN_PAREN, T_CLOSE_PAREN;
// 注释
terminal String T_LINE_COMMENT, T_BLOCK_COMMENT_CONTENT;
terminal String T_OPEN_BLOCK_COMMENT, T_CLOSE_BLOCK_COMMENT;
// 符号
terminal    T_SEMI,        // ;
            T_COMMA,            // ,
            T_DOT,              // .
            T_DOUBLE_ARROW,     // =>
            T_SINGLE_ARROW,     // ->
            T_ELLIPSIS,         // ...
            T_SCOPE_RESOLUTION, // ::
            T_PLUS,             // +
            T_MINUS,            // -
            T_MUL,              // *
            T_DIV,              // /
            T_MOD,              // %
            T_INC,              // ++
            T_DEC,              // --
            T_ASSIGN,           // =
            T_PLUS_ASSIGN,      // +=
            T_DOT_ASSIGN,       // .=
            T_MINUS_ASSIGN,     // -=
            T_MUL_ASSIGN,       // *=
            T_DIV_ASSIGN,       // /=
            T_MOD_ASSIGN,       // %=
            T_POW_ASSIGN,       // **=
            T_BIT_AND,          // &
            T_BIT_OR,           // |
            T_BIT_XOR,          // ^
            T_BIT_NOT,          // ~
            T_LEFT_SHIFT,       // <<
            T_RIGHT_SHIFT,      // >>
            T_BIT_AND_ASSIGN,   // &=
            T_BIT_OR_ASSIGN,    // |=
            T_BIT_XOR_ASSIGN,   // ^=
            T_LEFT_SHIFT_ASSIGN,// <<=
            T_RIGHT_SHIFT_ASSIGN,// >>=
            T_COALESCE_ASSIGN,  // ??=
            T_BOOL_NOT,         // !
            T_BOOL_AND,         // &&
            T_LOW_BOOL_AND,     // and
            T_BOOL_OR,          // ||
            T_LOW_BOOL_OR,      // or
            T_LOW_BOOL_XOR,     // xor
            T_DOUBLE_EQ,        // ==
            T_NOT_DOUBLE_EQ,    // !=
            T_TRIPLE_EQ,        // ===
            T_NOT_TRIPLE_EQ,    // !==
            T_SPACESHIP,        // <=>
            T_LT,               // <
            T_GT,               // >
            T_LT_EQ,            // <=
            T_GT_EQ,            // >=
            T_QUESTION,         // ?
            T_COLON,            // :
            T_POW,              // **
            T_COALESCE,         // ??
            T_ELVIS,            // ?:
            T_AT;               // @
// 关键字
terminal    T_NULL,             // null
            T_TRUE,             // true
            T_FALSE,            // false
            T_ECHO,             // echo
            T_PRINT,            // print
            T_RETURN,           // return
            T_THROW,            // throw
            T_IF,               // if
            T_ELSE,             // else
            T_ELSEIF,           // elseif
            T_FOR,              // for
            T_FOREACH,          // foreach
            T_WHILE,            // while
            T_DO,               // do
            T_END_IF,           // endif
            T_END_FOR,          // endfor
            T_END_FOREACH,      // endforeach
            T_END_WHILE,        // endwhile
            T_BREAK,            // break
            T_CONTINUE,         // continue
            T_GOTO,             // goto
            T_SWITCH,           // switch
            T_CASE,             // case
            T_DEFAULT,          // default
            T_END_SWITCH,       // endswitch
            T_TRY,              // try
            T_CATCH,            // catch
            T_FINALLY,          // finally
            T_FUNCTION,         // function
            T_CLASS,            // class
//            T_ENUM,             // enum
            T_TRAIT,            // trait
            T_INTERFACE,        // interface
            T_EXTENDS,          // extends
            T_IMPLEMENTS,       // implements
            T_INSTEADOF,        // insteadof
            T_STATIC,           // static
            T_ABSTRACT,         // abstract
            T_FINAL,            // final
            T_PRIVATE,          // private
            T_PROTECTED,        // protected
            T_PUBLIC,           // public
            T_CONST,            // const
            T_NEW,              // new
            T_INSTANCEOF,       // instanceof
            T_MIXED,            // mixed
            T_CALLABLE,         // callable
            T_INT,              // int
            T_FLOAT,            // float
            T_BOOL,             // bool
            T_STRING,           // string
            T_ARRAY,            // array
            T_OBJECT,           // object
            T_ITERABLE,         // iterable
            T_RESOURCE,         // resource
            T_VOID,             // void
            T_YIELD,            // yield
            T_YIELD_FROM,       // yield from
            T_VAR,              // var
            T_GLOBAL,           // global
            T_LIST,             // list
            T_CLONE,            // clone
            T_USE,              // use
            T_NAMESPACE,        // namespace
            T_AS,               // as
            T_REQUIRE,          // require
            T_REQUIRE_ONCE,     // require_once
            T_INCLUDE,          // include
            T_INCLUDE_ONCE,     // include_once
            T_EVAL,             // eval
            T_EXIT,             // exit
            T_DIE,              // die
            T_DECLARE,          // declare
            T_SELF,             // self
            T_PARENT;           // parent

// 值
terminal String T_STR_VALUE, T_VAR_NAME, T_SIMPLE_NAME, T_INT_VALUE, T_FLOAT_VALUE, T_FLOAT_E_VALUE;
terminal String T_QUALIFIED_NAME;
terminal T_WHITESPACE;

// T_SIMPLE_NAME 或 T_QUALIFIED_NAME
nonterminal IAstNode NT_IDENTIFIER;
// 权限修饰符
nonterminal IAstNode NT_ACCESS_MODIFIER;
// 修饰符
nonterminal IAstNode NT_METHOD_MODIFIER;
nonterminal List NT_METHOD_MODIFIER_LIST;

nonterminal IAstNode NT_CLASS_STATE_OPTLIST;

// 根节点
nonterminal IAstNode NT_S, NT_PHP_BLOCK;
// top
nonterminal IAstNode NT_TOP_STATEMENT, NT_TOP_STATEMENT_OPTLIST;
nonterminal List NT_TOP_STATEMENT_LIST;
// 类型
nonterminal IAstNode NT_TYPE;
// use
nonterminal IAstNode NT_USE_DECLARATION, NT_USE_TARGET;
nonterminal List NT_USE_TARGET_LIST;
// namespace
nonterminal IAstNode NT_NAMESPACE_DELEARATION;
// function
nonterminal IAstNode    NT_FUNC_DECLARATION,
                        NT_METHOD_DECLARATION,
                        NT_ORIGINAL_FUNC_DECLARATION,
                        NT_FUNC_PARAMETER,
                        NT_FUNC_PARAMETER_OPTLIST,
                        NT_AYNYMOUS_FUNC_DECLARATION;
nonterminal List NT_FUNC_PARAMETER_LIST;
// class
nonterminal IAstNode NT_CLASS_DECLARATION, NT_ORIGINAL_CLASS_DECLARATION, NT_CLASS_STAT;
nonterminal List NT_CLASS_STAT_LIST, NT_IMPLEMENT_LIST;
nonterminal IAstNode NT_TRAIT_DECLARATION;
nonterminal IAstNode NT_INTERFACE_DECLARATION, NT_INTERFACE_STAT;
nonterminal List NT_INTERFACE_STAT_LIST;
nonterminal IAstNode NT_CLASS_PROPERTY, NT_CLASS_CONSTANT, NT_CLASS_USE, NT_CLASS_USE_SUB_STAT, NT_CLASS_USE_SUB_STAT_OPTLIST;
nonterminal List NT_CLASS_USE_ITEM_LIST, NT_CLASS_USE_SUB_STAT_LIST;

// 表达式
nonterminal IAstNode    NT_STATEMENT_OPTLIST,
                        NT_STATEMENT,
                        NT_BLOCK_STAT,
                        NT_IF_STAT, NT_ELSEIF_STAT, NT_ELSEIF_OPTLIST, NT_ELSE_STAT,
                        NT_WHILE_STAT, NT_DO_WHILE_STAT,
                        NT_FOR_STAT, NT_FOR_EACH_STAT,
                        NT_VAR_INIT_EXPR,
                        NT_SWITCH_STAT, NT_CASE_STAT,
                        NT_BREAK_STAT, NT_CONTINUE_STAT, NT_RETURN_STAT,
                        NT_REQUIRE_STAT, NT_INCLUDE_STAT,
                        NT_YIELD_STAT, NT_YIELD_FROM_STAT,
                        NT_GLOBAL_STAT,
                        NT_STATIC_VAR_STAT,
                        NT_EXPRESSION,
                        NT_EXPRESSION_STAT,
                        NT_TRY_CATCH_STAT, NT_TRY_STAT, NT_CATCH_STAT, NT_FINALLY_STAT,
                        NT_THROW_STAT,
                        NT_GOTO_STAT,
                        NT_DECLARE_STAT, NT_DECLARE_PARAM,
                        NT_USE_STAT,
                        NT_EMPTY_STAT,
                        NT_CONST_STAT,
                        NT_NEW_EXPR,
                        NT_ARRAY_CREATE_EXPR, NT_ARRAY_CREATE_INIT_EXPR,
                        NT_ARRAY_ACCESS,
                        NT_OP_EXPR
                        ;
nonterminal List    NT_STATEMENT_LIST,      // 语句列表
                    NT_ELSEIF_LIST,         // elseif 列表
                    NT_VAR_INIT_EXPR_LIST,  // 变量初始化列表
                    NT_CASE_LIST,           // case 列表
                    NT_DECLARE_PARAM_LIST,  // declare 参数列表，逗号分隔
                    NT_VAR_LIST,            // 变量名列表，逗号分隔
                    NT_EXPR_LIST,           // 表达式列表，逗号分隔
                    NT_CATCH_LIST,          // catch 列表
                    NT_ARRAY_CREATE_INIT_EXPR_LIST; // array 初始化列表
nonterminal IAstNode NT_BINARY_OP, NT_RIGHT_OP, NT_LEFT_OP, NT_CAST_OP;

precedence left T_ELSE, T_ELSEIF;
precedence left T_COMMA;
precedence left T_LOW_BOOL_OR;
precedence left T_LOW_BOOL_XOR;
precedence left T_LOW_BOOL_AND;
precedence right T_PRINT;
precedence right T_YIELD;
precedence right T_YIELD_FROM;
precedence right
    T_ASSIGN,   // =
    T_PLUS_ASSIGN, T_MINUS_ASSIGN,  // += -=
    T_MUL_ASSIGN, T_DIV_ASSIGN, T_MOD_ASSIGN,   // *= /= %=
    T_POW_ASSIGN,   // **=
    T_DOT_ASSIGN,   // .=
    T_BIT_AND_ASSIGN, T_BIT_OR_ASSIGN, T_BIT_XOR_ASSIGN,    // &= |= ^=
    T_LEFT_SHIFT_ASSIGN, T_RIGHT_SHIFT_ASSIGN,  // <<= >>=
    T_COALESCE_ASSIGN;  // ??=
precedence left T_QUESTION, T_COLON;    // ? :
precedence right T_COALESCE;            // ??
precedence left T_ELVIS;                // ?:
precedence left T_BOOL_OR;              // ||
precedence left T_BOOL_AND;             // &&
precedence left T_BIT_OR;               // |
precedence left T_BIT_XOR;              // ^
precedence left T_BIT_AND;              // &
precedence nonassoc
    T_DOUBLE_EQ, T_NOT_DOUBLE_EQ,   // == !=
    T_TRIPLE_EQ, T_NOT_TRIPLE_EQ,   // === !==
    T_SPACESHIP;                    // <=>
precedence nonassoc
    T_LT, T_LT_EQ,  // < <=
    T_GT, T_GT_EQ;  // > >=
precedence left T_DOT;  // .
precedence left T_LEFT_SHIFT, T_RIGHT_SHIFT;    // << >>
precedence left T_PLUS, T_MINUS;    // + -
precedence left T_MUL, T_DIV, T_MOD;    // * / %
precedence right T_BOOL_NOT;    // !
precedence left T_INSTANCEOF;   // instanceof
precedence right T_AT, T_INC, T_DEC, T_BIT_NOT; // @ ++ -- ~
precedence right T_POW; // **
precedence right T_CLONE, T_NEW;    // clone new
precedence left T_OPEN_SQUARE;

start with NT_S;

// 标识符
NT_IDENTIFIER ::= T_SIMPLE_NAME:simpleName | T_QUALIFIED_NAME:qualifiedName;
// 修饰符
NT_ACCESS_MODIFIER ::= T_PUBLIC:isPublic | T_PROTECTED:isProtected | T_PRIVATE:isPrivate;
NT_METHOD_MODIFIER ::= T_STATIC:isStatic | T_FINAL:isFinal | T_ABSTRACT:isAbstract | NT_ACCESS_MODIFIER:access_nl_inline;
NT_METHOD_MODIFIER_LIST ::= NT_METHOD_MODIFIER:item
    | NT_METHOD_MODIFIER_LIST NT_METHOD_MODIFIER:item;

NT_S ::= T_CODE_BLOCK NT_TOP_STATEMENT_OPTLIST:list_nl_inline;

// 顶层表达式
NT_TOP_STATEMENT ::= NT_USE_DECLARATION:use
    | NT_NAMESPACE_DELEARATION:namespace
    | NT_FUNC_DECLARATION:func
    | NT_CLASS_DECLARATION:clazz
    | NT_TRAIT_DECLARATION:trait
    | NT_INTERFACE_DECLARATION:iface
    | NT_STATEMENT:statement;
NT_TOP_STATEMENT_LIST ::= NT_TOP_STATEMENT:item
    | NT_TOP_STATEMENT_LIST NT_TOP_STATEMENT:item;
NT_TOP_STATEMENT_OPTLIST ::= NT_TOP_STATEMENT_LIST:list | /* empty */;

NT_STATEMENT_OPTLIST ::= NT_STATEMENT_LIST:list | /* empty */;
NT_STATEMENT_LIST ::= NT_STATEMENT:item
    | NT_STATEMENT_LIST NT_STATEMENT:item;

// 完整的 use 表达式
NT_USE_DECLARATION ::= T_USE NT_USE_TARGET:target T_SEMI;
// use 后方的表达式
NT_USE_TARGET ::= NT_IDENTIFIER:identifier T_AS T_SIMPLE_NAME:alias         // \xxx\xxx as xxx
    | T_FUNCTION:isFunc NT_IDENTIFIER:identifier T_AS T_SIMPLE_NAME:alias   // function \xxx\xxx as xxx
    | T_CONST:isConst NT_IDENTIFIER:identifier T_AS T_SIMPLE_NAME:alias     // const \xxx\xxx as xxx
    | NT_IDENTIFIER:identifier                      // \xxx\xxx
    | T_FUNCTION:isFunc NT_IDENTIFIER:identifier    // function \xxx\xxx
    | T_CONST:isConst NT_IDENTIFIER:identifier      // const \xxx\xxx
    // \xxx\xxx{item, item...}
    | T_QUALIFIED_NAME:prefix T_OPEN_CURLY NT_USE_TARGET_LIST:subList T_CLOSE_CURLY
    // const \xxx\xxx{item, item...}
    | T_CONST:isConst T_QUALIFIED_NAME:qualifiedPrefix T_OPEN_CURLY NT_USE_TARGET_LIST:subList T_CLOSE_CURLY
    // function \xxx\xxx{item, item, <...>,?}
    | T_FUNCTION:isFunc T_QUALIFIED_NAME:qualifiedPrefix T_OPEN_CURLY NT_USE_TARGET_LIST:subList T_CLOSE_CURLY;
// item, item, <...>
NT_USE_TARGET_LIST ::= NT_USE_TARGET:item
    | NT_USE_TARGET_LIST T_COMMA NT_USE_TARGET:item;

// namespace
NT_NAMESPACE_DELEARATION ::= T_NAMESPACE NT_IDENTIFIER:identifier T_SEMI    // namespace xxx;
    // namespace xxx {}
    | T_NAMESPACE NT_IDENTIFIER:identifier T_OPEN_CURLY NT_TOP_STATEMENT_OPTLIST:list_nl_inline T_CLOSE_CURLY;

// 顶层函数
NT_FUNC_DECLARATION ::= NT_ORIGINAL_FUNC_DECLARATION:original_nl_inline
    | T_FINAL:isFinal NT_ORIGINAL_FUNC_DECLARATION:original_nl_inline;
// 函数定义
NT_ORIGINAL_FUNC_DECLARATION ::=
    // function &xxx(xxx) { xxx }
    T_FUNCTION T_BIT_AND:isRef T_SIMPLE_NAME:name T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // function xxx(xxx) { xxx }
    | T_FUNCTION T_SIMPLE_NAME:name T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // function &xxx(xxx): xxx { xxx }
    | T_FUNCTION T_BIT_AND:isRef T_SIMPLE_NAME:name T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_COLON NT_TYPE:returnType
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // function xxx(xxx): xxx { xxx }
    | T_FUNCTION T_SIMPLE_NAME:name T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_COLON NT_TYPE:returnType
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY;
// 类方法
NT_METHOD_DECLARATION ::= NT_ORIGINAL_FUNC_DECLARATION:func_nl_inline
    | NT_METHOD_MODIFIER_LIST:modifierList NT_ORIGINAL_FUNC_DECLARATION:func_nl_inline;

// 匿名函数
NT_AYNYMOUS_FUNC_DECLARATION ::=
    // function(xxx) { xxx }
    T_FUNCTION T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // function(xxx): xxx { xxx }
    | T_FUNCTION T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_COLON NT_TYPE:returnType
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // static function(xxx) { xxx }
    | T_STATIC:isStatic T_FUNCTION T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // static function(xxx): xxx { xxx }
    | T_STATIC:isStatic T_FUNCTION T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_COLON NT_TYPE:returnType
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // function&(xxx) { xxx }
    | T_FUNCTION T_BIT_AND:isRef T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // function&(xxx): xxx { xxx }
    | T_FUNCTION T_BIT_AND:isRef T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_COLON NT_TYPE:returnType
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // static function&(xxx) { xxx }
    | T_STATIC:isStatic T_FUNCTION T_BIT_AND:isRef T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY
    // static function&(xxx): xxx { xxx }
    | T_STATIC:isStatic T_FUNCTION T_BIT_AND:isRef T_OPEN_PAREN NT_FUNC_PARAMETER_OPTLIST:parameters_inline T_CLOSE_PAREN
        T_COLON NT_TYPE:returnType
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statements_inline T_CLOSE_CURLY;

// 类定义
NT_CLASS_DECLARATION ::= NT_ORIGINAL_CLASS_DECLARATION:original_nl_inline
    | T_FINAL:isFinal NT_ORIGINAL_CLASS_DECLARATION:original_nl_inline
    | T_ABSTRACT:isAbstract NT_ORIGINAL_CLASS_DECLARATION:original_nl_inline;
NT_ORIGINAL_CLASS_DECLARATION ::=
    // class xxx { xxx }
    T_CLASS T_SIMPLE_NAME:name T_OPEN_CURLY NT_CLASS_STATE_OPTLIST:list_nl_inline T_CLOSE_CURLY
    // class xxx extends xxx { xxx }
    | T_CLASS T_SIMPLE_NAME:name T_EXTENDS NT_IDENTIFIER:parent
        T_OPEN_CURLY NT_CLASS_STATE_OPTLIST:list_nl_inline T_CLOSE_CURLY
    // class xxx implements xxx { xxx }
    | T_CLASS T_SIMPLE_NAME:name T_IMPLEMENTS NT_IMPLEMENT_LIST:ifaceList
        T_OPEN_CURLY NT_CLASS_STATE_OPTLIST:list_nl_inline T_CLOSE_CURLY
    // class xxx extends xxx implements xxx { xxx }
    | T_CLASS T_SIMPLE_NAME:name T_EXTENDS NT_IDENTIFIER:parent T_IMPLEMENTS NT_IMPLEMENT_LIST:ifaceList
        T_OPEN_CURLY NT_CLASS_STATE_OPTLIST:list_nl_inline T_CLOSE_CURLY;
// 接口实现列表
NT_IMPLEMENT_LIST ::= NT_IDENTIFIER:iface
    | NT_IMPLEMENT_LIST T_COMMA NT_IDENTIFIER:iface;
// trait class
NT_TRAIT_DECLARATION ::= T_TRAIT T_SIMPLE_NAME:name T_OPEN_CURLY NT_CLASS_STATE_OPTLIST:list_nl_inline T_CLOSE_CURLY;
// interface
NT_INTERFACE_DECLARATION ::=
    // interface xxx { xxx }
    T_INTERFACE T_SIMPLE_NAME:name T_OPEN_CURLY NT_INTERFACE_STAT_LIST:statementList T_CLOSE_CURLY
    // interface xxx extends xxx { xxx }
    | T_INTERFACE T_SIMPLE_NAME:name T_EXTENDS NT_IMPLEMENT_LIST:ifaceList
        T_OPEN_CURLY NT_INTERFACE_STAT_LIST:statementList T_CLOSE_CURLY;
// 接口成员列表
NT_INTERFACE_BODY ::= NT_INTERFACE_STAT_LIST:list | /* empty */;
NT_INTERFACE_STAT_LIST ::=
    NT_INTERFACE_STAT:statement
    | NT_INTERFACE_STAT_LIST T_COMMA NT_INTERFACE_STAT:statement;
NT_INTERFACE_STAT ::=
    T_PUBLIC NT_ORIGINAL_FUNC_DECLARATION:func_nl_inline
    | NT_ORIGINAL_FUNC_DECLARATION:func_nl_inline;

// 方法参数列表
NT_FUNC_PARAMETER ::=
    // <type> &$xxx = xxx
    NT_TYPE:type T_BIT_AND:isRef T_VAR_NAME:name T_ASSIGN NT_EXPRESSION:defExpr
    // &$xxx = xxx
    | T_BIT_AND:isRef T_VAR_NAME:name T_ASSIGN NT_EXPRESSION:defExpr
    // &$xxx
    | T_BIT_AND:isRef T_VAR_NAME:name
    // <type> &$xxx
    | NT_TYPE:type T_BIT_AND:isRef T_VAR_NAME:name
    // $xxx = xxx
    |T_VAR_NAME:name T_ASSIGN NT_EXPRESSION:defExpr
    // <type> $xxx = xxx
    | NT_TYPE:type T_VAR_NAME:name T_ASSIGN NT_EXPRESSION:defExpr
    // $xxx
    | T_VAR_NAME:name
    // <type> xxx
    | NT_TYPE:type T_VAR_NAME:name;
NT_FUNC_PARAMETER_LIST ::= NT_FUNC_PARAMETER:item
    | NT_FUNC_PARAMETER_LIST T_COMMA NT_FUNC_PARAMETER:item;
NT_FUNC_PARAMETER_OPTLIST ::= NT_FUNC_PARAMETER_LIST:list | /* empty */;

NT_CLASS_STATE_OPTLIST ::= NT_CLASS_STAT_LIST:list | /* empty */;
NT_CLASS_STAT_LIST ::= NT_CLASS_STAT:statement
    | NT_CLASS_STAT_LIST NT_CLASS_STAT:statement;
NT_CLASS_STAT ::= NT_METHOD_DECLARATION:method
    | NT_CLASS_PROPERTY:property
    | NT_CLASS_CONSTANT:constant;
// 类属性（不包含常量）
NT_CLASS_PROPERTY ::=
    // public $xxx;
    NT_METHOD_MODIFIER_LIST:modifiers T_VAR_NAME:name T_SEMI
    // public $xxx = xxx;
    | NT_METHOD_MODIFIER_LIST:modifiers T_VAR_NAME:name T_ASSIGN NT_EXPRESSION_STAT:value T_SEMI;
// 类常量（不包含 `define`）
NT_CLASS_CONSTANT ::=
    // const xxx = x;
    T_CONST T_SIMPLE_NAME:name T_ASSIGN NT_CONST_STAT:value T_SEMI
    // public const xxx = x;
    | NT_ACCESS_MODIFIER:accessModifier T_CONST T_SIMPLE_NAME:name T_ASSIGN NT_CONST_STAT:value T_SEMI;
// class 中使用 use 引入 trait 使用的表达式
NT_CLASS_USE ::=
    // use xxx, xxx, ...;
    T_USE NT_CLASS_USE_ITEM_LIST:useList T_SEMI
    // use xxx { xxx };
    | T_USE NT_CLASS_USE_ITEM_LIST:useList T_OPEN_CURLY NT_CLASS_USE_SUB_STAT_OPTLIST:sub_inline T_CLOSE_CURLY;
// use 中的类名列表
NT_CLASS_USE_ITEM_LIST ::= NT_IDENTIFIER:identifier
    | NT_CLASS_USE_ITEM_LIST T_COMMA NT_IDENTIFIER:identifier;
// use 表达式后方的 `{}` 中的内容
NT_CLASS_USE_SUB_STAT ::=
    // xxx as xxx;
    NT_IDENTIFIER:identifier T_AS T_SIMPLE_NAME:alias T_SEMI
    // xxx insteadof xxx, xxx, ...;
    | NT_IDENTIFIER:identifier T_SCOPE_RESOLUTION T_SIMPLE_NAME:field T_INSTEADOF NT_CLASS_USE_ITEM_LIST:lowPriority;
NT_CLASS_USE_SUB_STAT_LIST ::= NT_CLASS_USE_SUB_STAT:statement
    | NT_CLASS_USE_SUB_STAT_LIST NT_CLASS_USE_SUB_STAT:statement;
NT_CLASS_USE_SUB_STAT_OPTLIST ::= NT_CLASS_USE_SUB_STAT_LIST:list | /* empty */;

NT_STATEMENT ::=
    T_SIMPLE_NAME:simpleName T_COLON   // xxx:
    | NT_IF_STAT:ifStatement
    | NT_WHILE_STAT:whileStatement
    | NT_DO_WHILE_STAT:doWhileStatement
    | NT_FOR_STAT:forStatement
    | NT_FOR_EACH_STAT:foreachStatement
    | NT_SWITCH_STAT:switchStatement
    | NT_BREAK_STAT:breakStatement
    | NT_CONTINUE_STAT:continueStatement
    | NT_GOTO_STAT:gotoStatement
    | NT_RETURN_STAT:returnStatement
    | NT_THROW_STAT:throwStatement
    | NT_YIELD_STAT:yieldStatement
    | NT_YIELD_FROM_STAT:yieldFromStatement
    | NT_GLOBAL_STAT:globalStatement
    | NT_STATIC_VAR_STAT:staticVarStatement
    | NT_EXPRESSION_STAT:expressionStatement
    | NT_TRY_CATCH_STAT:tryCatchStatement
    | NT_DECLARE_STAT:declareStatement
    | NT_EMPTY_STAT:emptyStatement
    | NT_BLOCK_STAT:blockStatement
    | T_ECHO NT_EXPR_LIST:echoList;

NT_EMPTY_STAT ::= T_SEMI;
NT_BLOCK_STAT ::= T_OPEN_CURLY T_CLOSE_CURLY;

NT_BINARY_OP ::=
    T_COMMA:isComma | T_DOT:isDot
    | T_PLUS:isPlus | T_MINUS:isMinus | T_MUL:isMul | T_DIV:isDiv | T_MOD:isMod
    | T_PLUS_ASSIGN:isPlusAssign | T_DOT_ASSIGN:isDotAssign
    | T_MINUS_ASSIGN:isMinusAssign | T_MUL_ASSIGN:isMulAssign | T_DIV_ASSIGN:isDivAssign | T_MOD_ASSIGN:isModAssign
    | T_BIT_AND:isBitAnd | T_BIT_OR:isBitOr | T_BIT_XOR:isBitXor
    | T_LOW_BOOL_OR:isLowBoolOr | T_LOW_BOOL_AND:isLowBoolAnd | T_LOW_BOOL_XOR:isLowBoolXor
    | T_LEFT_SHIFT:isLeftShift | T_RIGHT_SHIFT:isRightShift
    | T_BIT_AND_ASSIGN:isBitAndAssign | T_BIT_OR_ASSIGN:isBitOrAssign | T_BIT_XOR_ASSIGN:isBitXorAssign
    | T_LEFT_SHIFT_ASSIGN:isLeftShiftAssign | T_RIGHT_SHIFT_ASSIGN:isRightShiftAssign
    | T_BOOL_AND:isBoolAnd | T_BOOL_OR:isBoolOr
    | T_DOUBLE_EQ:isDoubleEq | T_NOT_DOUBLE_EQ:isNotDoubleEq
    | T_TRIPLE_EQ:isTripleEq | T_NOT_TRIPLE_EQ:isNotTripleEq
    | T_LT:isLt | T_GT:isGt | T_LT_EQ:isLtEq | T_GT_EQ:isGtEq
    | T_POW:isPow
    | T_COALESCE:isCoalesce | T_ELVIS:isElvis;
NT_CAST_OP ::=
    T_OPEN_PAREN T_INT:isCastInt T_CLOSE_PAREN
    | T_OPEN_PAREN T_FLOAT:isCastFloat T_CLOSE_PAREN
    | T_OPEN_PAREN T_STRING:isCastString T_CLOSE_PAREN
    | T_OPEN_PAREN T_ARRAY:isCastArray T_CLOSE_PAREN
    | T_OPEN_PAREN T_OBJECT:isCastObject T_CLOSE_PAREN
    | T_OPEN_PAREN T_BOOL:isCastBool T_CLOSE_PAREN;
NT_LEFT_OP ::=
    NT_RIGHT_OP:inc_nl_inline
    | T_BOOL_NOT:isBoolNot | T_BIT_NOT:isBitNot
    | T_PLUS:isPlus | T_MINUS:isMinus
    | NT_CAST_OP:cast_nl_inline
    | T_PRINT:isPrint;
NT_RIGHT_OP ::= T_INC:isInc | T_DEC:isDec;

NT_EXPRESSION ::=
    T_VAR_NAME:varName          // $xxx
    | T_INT_VALUE:intValue
    | T_FLOAT_VALUE:floatValue
    | T_STR_VALUE:stringValue
    | T_TRUE:isTrue
    | T_FALSE:isFalse
    | T_CLONE NT_EXPRESSION:cloneExpr           // clone xxx
    | NT_NEW_EXPR:newExpr                       // new xxx
    | NT_ARRAY_CREATE_EXPR:newArrayExpr         // 构造数组/对象
    | NT_AYNYMOUS_FUNC_DECLARATION:anonyFunc    // 匿名函数
    | NT_ARRAY_ACCESS:arrayAccess               // 数组/对象访问
    | NT_OP_EXPR:opExpr
    | T_OPEN_PAREN NT_EXPRESSION:subExpr T_CLOSE_PAREN  // (xxx)
    ;
NT_EXPRESSION_STAT ::= NT_EXPRESSION:state_nl_inline T_SEMI;
NT_EXPR_LIST ::= NT_EXPRESSION:expr | NT_EXPR_LIST T_COMMA NT_EXPRESSION:expr;

// xxx[xxx]
NT_ARRAY_ACCESS ::= NT_EXPRESSION:src T_OPEN_SQUARE NT_EXPRESSION:index T_CLOSE_SQUARE;
NT_OP_EXPR ::=
    // xxx <op> xxx
    NT_EXPRESSION:opLeft NT_BINARY_OP:midOp NT_EXPRESSION:opRight
    // $xxx = xxx
    | NT_VAR_INIT_EXPR:init_nl_inline
    // <op> xxx
    | NT_LEFT_OP:lop NT_EXPRESSION:opRight %prec T_AT
    // xxx <op>
    | NT_EXPRESSION:opLeft NT_RIGHT_OP:rop;

// if else if 表达式
NT_IF_STAT ::=
    // if (xxx): xxx elseif (xxx): xxx else: xxx endif
    T_IF T_OPEN_PAREN NT_EXPRESSION:condition T_CLOSE_PAREN T_COLON NT_STATEMENT:statement
        NT_ELSEIF_OPTLIST:elseIf_inline NT_ELSE_STAT:else_inline T_END_IF
    // if (xxx) xxx else if (xxx) xxx else xxx
    | T_IF T_OPEN_PAREN NT_EXPRESSION:condition T_CLOSE_PAREN NT_STATEMENT:statement
        NT_ELSEIF_OPTLIST:elseIf_inline NT_ELSE_STAT:else_inline;
NT_ELSEIF_STAT ::=
    // elseif (xxx): xxx
    T_ELSEIF T_OPEN_PAREN NT_EXPRESSION:condition T_CLOSE_PAREN T_COLON NT_STATEMENT:statement
    // else if (xxx) xxx
    | T_ELSEIF T_OPEN_PAREN NT_EXPRESSION:condition T_CLOSE_PAREN NT_STATEMENT:statement;
NT_ELSEIF_LIST ::= NT_ELSEIF_STAT:statement
    | NT_ELSEIF_LIST NT_ELSEIF_STAT:statement;
NT_ELSEIF_OPTLIST ::= NT_ELSEIF_LIST:list | /* empty */;
NT_ELSE_STAT ::= T_ELSE T_COLON NT_STATEMENT:statement | T_ELSE NT_STATEMENT:statement | /* empty */;

NT_WHILE_STAT ::=
    // while (xxx): xxx endwhile
    T_WHILE T_OPEN_PAREN NT_EXPRESSION:condition T_CLOSE_PAREN T_COLON NT_STATEMENT:statement T_END_WHILE
    // while (xxx) xxx
    | T_WHILE T_OPEN_PAREN NT_EXPRESSION:condition T_CLOSE_PAREN NT_STATEMENT:statement;

// do xxx while (xxx);
NT_DO_WHILE_STAT ::=
    T_DO NT_STATEMENT:statement T_WHILE T_OPEN_PAREN NT_EXPRESSION:condition T_CLOSE_PAREN T_SEMI;

NT_VAR_INIT_EXPR ::= T_VAR_NAME:varName T_ASSIGN NT_EXPRESSION:initExpr;
NT_VAR_INIT_EXPR_LIST ::= NT_VAR_INIT_EXPR:statement
    | NT_VAR_INIT_EXPR_LIST NT_VAR_INIT_EXPR:statement;
NT_FOR_STAT ::=
    // for (xxx; xxx; xxx): xxx endfor
    T_FOR T_OPEN_PAREN
        NT_VAR_INIT_EXPR_LIST:initList T_SEMI NT_EXPRESSION_STAT:condition NT_EXPRESSION:loopStatement
        T_CLOSE_PAREN T_COLON NT_STATEMENT:statement T_END_FOR
    // for (; xxx; xxx): xxx endfor
    | T_FOR T_OPEN_PAREN
        T_SEMI NT_EXPRESSION_STAT:condition NT_EXPRESSION:loopStatement
        T_CLOSE_PAREN T_COLON NT_STATEMENT:statement T_END_FOR
    // for (xxx; xxx; xxx) xxx
    | T_FOR T_OPEN_PAREN
        NT_VAR_INIT_EXPR_LIST:initList T_SEMI NT_EXPRESSION_STAT:condition NT_EXPRESSION:loopStatement
        T_CLOSE_PAREN NT_STATEMENT:statement
    // for (; xxx; xxx) xxx
    | T_FOR T_OPEN_PAREN
        T_SEMI NT_EXPRESSION_STAT:condition NT_EXPRESSION:loopStatement
        T_CLOSE_PAREN NT_STATEMENT:statement
    // for (xxx; xxx;) xxx
    | T_FOR T_OPEN_PAREN
        NT_VAR_INIT_EXPR_LIST:initList T_SEMI NT_EXPRESSION_STAT:condition
        T_CLOSE_PAREN NT_STATEMENT:statement
    // for (; xxx;) xxx
    | T_FOR T_OPEN_PAREN
        T_SEMI NT_EXPRESSION_STAT:condition T_CLOSE_PAREN NT_STATEMENT:statement;

NT_FOR_EACH_STAT ::=
    // foreach (xxx as $xxx => $xxx): xxx endforeach
    T_FOREACH T_OPEN_PAREN
        NT_EXPRESSION:iterable T_AS T_VAR_NAME:key T_DOUBLE_ARROW T_VAR_NAME:value
        T_CLOSE_PAREN T_COLON NT_STATEMENT:statement T_END_FOREACH
    // foreach (xxx as $xxx): xxx endforeach
    | T_FOREACH T_OPEN_PAREN
        NT_EXPRESSION:iterable T_AS T_VAR_NAME:value
        T_CLOSE_PAREN T_COLON NT_STATEMENT:statement T_END_FOREACH
    // foreach (xxx as $xxx => $xxx) xxx
    | T_FOREACH T_OPEN_PAREN
        NT_EXPRESSION:iterable T_AS T_VAR_NAME:key T_DOUBLE_ARROW T_VAR_NAME:value
        T_CLOSE_PAREN NT_STATEMENT:statement
    // foreach (xxx as $xxx) xxx
    | T_FOREACH T_OPEN_PAREN
        NT_EXPRESSION:iterable T_AS T_VAR_NAME:value
       T_CLOSE_PAREN NT_STATEMENT:statement;

NT_SWITCH_STAT ::=
    // switch (xxx): xxx endswitch;
    T_SWITCH T_OPEN_PAREN NT_EXPRESSION:item T_CLOSE_PAREN T_COLON NT_CASE_LIST:caseList T_END_SWITCH T_SEMI
    // switch (xxx): endswitch;
    | T_SWITCH T_OPEN_PAREN NT_EXPRESSION:item T_CLOSE_PAREN T_COLON T_END_SWITCH T_SEMI
    // switch (xxx) { xxx }
    | T_SWITCH T_OPEN_PAREN NT_EXPRESSION:item T_CLOSE_PAREN T_OPEN_CURLY NT_CASE_LIST:caseList T_CLOSE_CURLY
    // switch (xxx) {}
    | T_SWITCH T_OPEN_PAREN NT_EXPRESSION:item T_CLOSE_PAREN T_OPEN_CURLY T_CLOSE_CURLY;
NT_CASE_LIST ::= NT_CASE_STAT:statement | NT_CASE_LIST NT_CASE_STAT:statement;
NT_CASE_STAT ::=
    T_CASE NT_EXPRESSION:condition T_COLON NT_STATEMENT_OPTLIST:statement_inline
    | T_DEFAULT T_COLON NT_STATEMENT_OPTLIST:statement_inline;

// break; | break <int>;
NT_BREAK_STAT ::= T_BREAK T_SEMI | T_BREAK T_INT_VALUE:breakCount T_SEMI;
// break; | break <int>;
NT_CONTINUE_STAT ::= T_CONTINUE T_SEMI | T_CONTINUE T_INT_VALUE:continueCount T_SEMI;

NT_DECLARE_STAT ::=
    // declare (xxx=xxx, ...) { xxx }
    T_DECLARE T_OPEN_PAREN NT_DECLARE_PARAM_LIST:paramList T_CLOSE_PAREN
        T_OPEN_CURLY NT_STATEMENT_OPTLIST:statement_inline T_CLOSE_CURLY
    // declare (xxx=xxx, ...);
    | T_DECLARE T_OPEN_PAREN NT_DECLARE_PARAM_LIST:paramList T_CLOSE_PAREN T_SEMI;
NT_DECLARE_PARAM ::=
    // xxx=<int>
    T_SIMPLE_NAME:key T_ASSIGN T_INT_VALUE:intValue
    // xxx=<string>
    | T_SIMPLE_NAME:key T_ASSIGN T_STR_VALUE:stringValue;
NT_DECLARE_PARAM_LIST ::= NT_DECLARE_PARAM:item
    | NT_DECLARE_PARAM_LIST T_COMMA NT_DECLARE_PARAM:item;

// return; | return xxx;
NT_RETURN_STAT ::= T_RETURN T_SEMI | T_RETURN NT_EXPRESSION_STAT:statement;
// require xxx; | require_once xxx;
NT_REQUIRE_STAT ::= T_REQUIRE:isRequire T_STR_VALUE:file T_SEMI
    | T_REQUIRE_ONCE:isRequireOnce T_STR_VALUE:file T_SEMI;
// include xxx; | include_once xxx;
NT_INCLUDE_STAT ::= T_INCLUDE:isInclude T_STR_VALUE:file T_SEMI
    | T_INCLUDE_ONCE:isIncludeOnce T_STR_VALUE:file T_SEMI;
// goto xxx;
NT_GOTO_STAT ::= T_GOTO T_SIMPLE_NAME:label T_SEMI;

NT_YIELD_STAT ::= T_YIELD T_SEMI    // yield;
    | T_YIELD NT_EXPRESSION_STAT:valueExpr  // yield xxx;
    | T_YIELD NT_EXPRESSION:keyExpr T_DOUBLE_ARROW NT_EXPRESSION_STAT:valueExpr;    // yield xxx => xxx;
// yield from xxx;
NT_YIELD_FROM_STAT ::= T_YIELD_FROM NT_EXPRESSION_STAT:expr;

NT_GLOBAL_STAT ::= T_GLOBAL NT_VAR_LIST:varList T_SEMI;
NT_VAR_LIST ::= T_VAR_NAME:item | NT_VAR_LIST T_COMMA T_VAR_NAME:item;
NT_STATIC_VAR_STAT ::= T_STATIC NT_VAR_INIT_EXPR_LIST:varList T_SEMI;

NT_TRY_CATCH_STAT ::=
    //  try catch finally
    NT_TRY_STAT:tryStatement NT_CATCH_LIST:catchList NT_FINALLY_STAT:finallyStatement
    // try catch
    | NT_TRY_STAT:tryStatement NT_CATCH_LIST:catchList
    // try finally
    | NT_TRY_STAT:tryStatement NT_FINALLY_STAT:finallyStatement;
// try { xxx }
NT_TRY_STAT ::= T_TRY T_OPEN_CURLY NT_STATEMENT_OPTLIST:statement_inline T_CLOSE_CURLY;
// catch (xxx $xxx) { xxx }
NT_CATCH_STAT ::= T_CATCH T_OPEN_PAREN NT_IDENTIFIER:exceptionClass T_VAR_NAME:varName T_CLOSE_PAREN
    T_OPEN_CURLY NT_STATEMENT_OPTLIST:statement_inline T_CLOSE_CURLY;
// catch...
NT_CATCH_LIST ::= NT_CATCH_STAT:item | NT_CATCH_LIST NT_CATCH_STAT:item;
// finally { xxx }
NT_FINALLY_STAT ::= T_FINALLY T_OPEN_CURLY NT_STATEMENT_OPTLIST:statement_inline T_CLOSE_CURLY;

NT_THROW_STAT ::= T_THROW NT_EXPRESSION_STAT:expr;

NT_NEW_EXPR ::=
    T_NEW NT_IDENTIFIER:className T_OPEN_PAREN NT_EXPR_LIST:paramList T_CLOSE_PAREN
    | T_NEW NT_IDENTIFIER:className T_OPEN_PAREN T_CLOSE_PAREN
    | T_NEW NT_IDENTIFIER:className;

NT_ARRAY_CREATE_EXPR ::=
    // array(xxx => xxx, ...,)
    T_ARRAY T_OPEN_PAREN NT_ARRAY_CREATE_INIT_EXPR_LIST:initList T_COMMA T_CLOSE_PAREN
    // array(xxx => xxx, ...)
    | T_ARRAY T_OPEN_PAREN NT_ARRAY_CREATE_INIT_EXPR_LIST:initList T_CLOSE_PAREN
    // array()
    | T_ARRAY T_OPEN_PAREN T_CLOSE_PAREN
    // [xxx => xxx, ...,]
    | T_OPEN_SQUARE NT_ARRAY_CREATE_INIT_EXPR_LIST:initList T_COMMA T_CLOSE_SQUARE
    // [xxx => xxx, ...]
    | T_OPEN_SQUARE NT_ARRAY_CREATE_INIT_EXPR_LIST:initList T_CLOSE_SQUARE
    // []
    | T_OPEN_SQUARE T_CLOSE_SQUARE;
NT_ARRAY_CREATE_INIT_EXPR ::=
    NT_EXPRESSION:keyExpr T_DOUBLE_ARROW NT_EXPRESSION:valueExpr
    | NT_EXPRESSION:valueExpr;
NT_ARRAY_CREATE_INIT_EXPR_LIST ::= NT_ARRAY_CREATE_INIT_EXPR:item
    | NT_ARRAY_CREATE_INIT_EXPR_LIST T_COMMA NT_ARRAY_CREATE_INIT_EXPR:item;